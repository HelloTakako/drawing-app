"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.preparePageInfoType = preparePageInfoType;
exports.prepareEdgeType = prepareEdgeType;
exports.prepareConnectionType = prepareConnectionType;

var _graphqlCompose = require("graphql-compose");

/* eslint-disable arrow-body-style */
// This is required due compatibility with old client code bases
const globalPageInfoTypes = {};

function createGlobalPageInfoType(name) {
  if (!globalPageInfoTypes[name]) {
    globalPageInfoTypes[name] = _graphqlCompose.ObjectTypeComposer.createTemp(`
      """Information about pagination in a connection."""
      type ${name} {
        """When paginating forwards, are there more items?"""
        hasNextPage: Boolean!
        
        """When paginating backwards, are there more items?"""
        hasPreviousPage: Boolean!

        """When paginating backwards, the cursor to continue."""
        startCursor: String

        """When paginating forwards, the cursor to continue."""
        endCursor: String
      }
    `);
  }

  return globalPageInfoTypes[name];
}

function preparePageInfoType(schemaComposer, name = 'PageInfo') {
  if (schemaComposer.has(name)) {
    return schemaComposer.getOTC(name);
  }

  const tc = createGlobalPageInfoType(name);
  schemaComposer.set(name, tc);
  return tc;
}

function prepareEdgeType(typeComposer) {
  const name = `${typeComposer.getTypeName()}Edge`;

  if (typeComposer.schemaComposer.has(name)) {
    return typeComposer.schemaComposer.getOTC(name);
  }

  const edgeType = typeComposer.schemaComposer.createObjectTC({
    name,
    description: 'An edge in a connection.',
    fields: {
      node: {
        type: new _graphqlCompose.NonNullComposer(typeComposer),
        description: 'The item at the end of the edge'
      },
      cursor: {
        type: 'String!',
        description: 'A cursor for use in pagination'
      }
    }
  });
  return edgeType;
}

function prepareConnectionType(typeComposer, resolverName) {
  const name = `${typeComposer.getTypeName()}${(0, _graphqlCompose.upperFirst)(resolverName || 'connection')}`;

  if (typeComposer.schemaComposer.has(name)) {
    return typeComposer.schemaComposer.getOTC(name);
  }

  const connectionType = typeComposer.schemaComposer.createObjectTC({
    name,
    description: 'A connection to a list of items.',
    fields: {
      count: {
        type: 'Int!',
        description: 'Total object count.'
      },
      pageInfo: {
        type: new _graphqlCompose.NonNullComposer(preparePageInfoType(typeComposer.schemaComposer)),
        description: 'Information to aid in pagination.'
      },
      edges: {
        type: new _graphqlCompose.NonNullComposer(new _graphqlCompose.ListComposer(new _graphqlCompose.NonNullComposer(prepareEdgeType(typeComposer)))),
        description: 'Information to aid in pagination.'
      }
    }
  });
  return connectionType;
}