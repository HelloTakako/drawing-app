{"version":3,"sources":["components/pages/NotFoundPage.js","components/pages/HomePage.js","components/pages/AboutPage.js","components/pages/LoginPage.js","components/NavBar.js","components/App.js","serviceWorker.js","index.js"],"names":["NotFoundPage","props","className","style","padding","HomePage","useEffect","document","title","AboutPage","LoginPage","NavBar","display","marginRight","to","App","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAEA,SAASA,EAAcC,GACrB,OACE,0BACEC,UAAU,eACVC,MAAO,CAACC,QAAS,WAEjB,8CCLN,SAASC,EAAUJ,GAMjB,OALAK,qBAAU,WACRC,SAASC,MAAT,6BAKA,0BACEN,UAAU,WACVC,MAAO,CAACC,QAAS,WAEjB,0CCXN,SAASK,EAAWR,GAMlB,OALAK,qBAAU,WACRC,SAASC,MAAT,WAKA,0BACEN,UAAU,YACVC,MAAO,CAACC,QAAS,WAEjB,2CCXN,SAASM,EAAWT,GAMlB,OALAK,qBAAU,WACRC,SAASC,MAAT,8BAKA,0BACEN,UAAU,YACVC,MAAO,CAACC,QAAS,WAEjB,2C,WCXN,SAASO,EAAQV,GACf,OACE,yBACEE,MAAO,CACLC,QAAS,OACTQ,QAAS,SAGX,kBAAC,IAAD,CAAMT,MAAO,CAACU,YAAa,QAASC,GAAG,KAAvC,QACA,kBAAC,IAAD,CAAMX,MAAO,CAACU,YAAa,QAASC,GAAG,UAAvC,UACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,Y,WCgBSC,E,uKAlBX,OACE,kBAAC,IAAD,KACE,yBAAKb,UAAU,OACb,kBAACS,EAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,IAAIC,UAAWb,IACjC,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,SAASC,UAAWT,IACtC,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,SAASC,UAAWR,IACtC,kBAAC,IAAD,CAAOQ,UAAWlB,W,GAXZmB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASnB,SAASoB,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5d8b29bd.chunk.js","sourcesContent":["import React from 'react';\n\nfunction NotFoundPage (props) {\n  return (\n    <main\n      className='NotFoundPage'\n      style={{padding: '0 20px'}}\n    >\n      <h2>404 Not Found</h2>\n    </main>\n  );\n}\n\nexport {NotFoundPage};\n","import React from 'react';\nimport { useEffect } from 'react';\n\nfunction HomePage (props) {\n  useEffect(() => {\n    document.title = `Home - Eduardo Muramoto`;\n  });\n\n\n  return (\n    <main\n      className='HomePage'\n      style={{padding: '0 20px'}}\n    >\n      <h2>Home Page</h2>\n    </main>\n  );\n}\n\nexport {HomePage};\n","import React from 'react';\nimport { useEffect } from 'react';\n\nfunction AboutPage (props) {\n  useEffect(() => {\n    document.title = `About`;\n  });\n\n\n  return (\n    <main\n      className='AboutPage'\n      style={{padding: '0 20px'}}\n    >\n      <h2>About Page</h2>\n    </main>\n  );\n}\n\nexport {AboutPage};\n","import React from 'react';\r\nimport { useEffect } from 'react';\r\n\r\nfunction LoginPage (props) {\r\n  useEffect(() => {\r\n    document.title = `Login - Eduardo Muramoto`;\r\n  });\r\n\r\n\r\n  return (\r\n    <main\r\n      className='LoginPage'\r\n      style={{padding: '0 20px'}}\r\n    >\r\n      <h2>Login Page</h2>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport {LoginPage};\r\n","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nfunction NavBar (props) {\n  return (\n    <nav\n      style={{\n        padding: '10px',\n        display: 'flex',\n      }}\n    >\n      <Link style={{marginRight: '20px'}} to=\"/\">Home</Link>\n      <Link style={{marginRight: '20px'}} to=\"/about\"> About</Link>\n      <Link to=\"/login\"> Log In</Link>\n\n    </nav>\n  );\n}\n\nexport {NavBar};\n","import React, {Component} from 'react';\nimport {HomePage, AboutPage, LoginPage, NotFoundPage} from './pages';\nimport {NavBar} from './NavBar';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom';\n\nclass App extends Component {\n  render () {\n    return (\n      <Router >\n        <div className=\"App\">\n          <NavBar\n          />\n          <Switch>\n            <Route exact path=\"/\" component={HomePage} />\n            <Route exact path=\"/About\" component={AboutPage} />\n            <Route exact path=\"/Login\" component={LoginPage} />\n            <Route component={NotFoundPage}/>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}